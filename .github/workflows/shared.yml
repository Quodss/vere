name: shared

on:
  workflow_call:
    inputs:
      pace:
        description: 'Release pace'
        type: string
        default: 'edge'
        required: false
      upload:
        description: 'Upload binaries to GCP'
        type: boolean
        default: false
        required: false
      fake_tests:
        description: 'Run fake ship tests'
        type: boolean
        default: true
        required: false
      next:
        description: 'Next Kelvin version branch name'
        type: string
        default: null
        required: false
    secrets:
      GCP_CREDENTIALS:
        required: false
      GCP_PROJECT:
        required: false

env:
  UPLOAD_BASE: bootstrap.urbit.org/vere
  GH_TOKEN: ${{ github.token }}

jobs:
  urbit:
    strategy:
      fail-fast: false

    runs-on: ubuntu-22.04

    steps:
      #
      # BUILD AND TEST
      #
      - uses: actions/checkout@v3

      - name: Set swap space
        run: |
          echo "Memory and swap:"
          free -h
          echo
          swapon --show
          echo

          export SWAP_FILE=$(swapon --show=NAME | tail -n 1)
          if test -z "${SWAP_FILE}"; then
              export SWAP_FILE=/swapfile
          else
              sudo swapoff -a
              sudo rm "${SWAP_FILE}"
          fi
          sudo fallocate -l 10G "${SWAP_FILE}"
          sudo chmod 600 "${SWAP_FILE}"
          sudo mkswap "${SWAP_FILE}"
          sudo swapon "${SWAP_FILE}"

          echo "Memory and swap:"
          free -h
          echo
          swapon --show
          echo

      - name: Set up build cache
        uses: actions/cache@v3
        with:
          key: linux-x86_64-zig-cache
          path: |
            ~/.zig
            ~/.cache/zig
            ${{ github.workspace }}/.zig-cache

      - name: Install Zig
        run: |
          if [ ! -d "$HOME/.zig" ]; then
            url="https://ziglang.org/download/0.13.0/zig-linux-x86_64-0.13.0.tar.xz"
            # download zig
            curl -L -o $HOME/zig.tar.xz "${url}"
            # unpack to ./zig
            mkdir $HOME/.zig
            tar -xf $HOME/zig.tar.xz -C $HOME/.zig --strip-components=1
          fi
          # add zig to path
          echo $HOME/.zig >> $GITHUB_PATH

      - name: Build binaries
        run: |
          zig build                    \
            -Dall                      \
            -Doptimize=ReleaseFast     \
            -Dpace=${{inputs.pace}}

      - name: Run unit tests
        run: |
          zig build                    \
            ur-test ent-test           \
            hashtable-test jets-test   \
            nock-test retrieve-test    \
            serial-test ames-test      \
            boot-test newt-test        \
            vere-noun-test unix-test   \
            benchmarks                 \
            -Doptimize=ReleaseFast     \
            -Dpace=${{inputs.pace}}    \
            --summary all

      # - name: Run fake ship tests
      #   if: ${{ matrix.target == 'linux-x86_64' && inputs.fake_tests }}
      #   run: |
      #     # See https://github.com/urbit/vere/issues/40.
      #     bazel build //pkg/vere:test-fake-ship

      #
      # UPLOAD TO GCP
      #

      - uses: google-github-actions/auth@v1
        if: ${{ inputs.upload }}
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - uses: google-github-actions/setup-gcloud@v1
        if: ${{ inputs.upload }}
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Upload binary to bootstrap.urbit.org
        if: ${{ inputs.upload }}
        run: |
          sha_version=$(sed -nr 's/#define URBIT_VERSION "(.*)"/\1/p' zig-out/include/version.h)
          declare -a targets=(
            "aarch64-linux-musl"
            "aarch64-macos-none"
            "x86_64-linux-musl"
            "x86_64-macos-none"
          )
          for target in "${targets[@]}"
          do
            urbit_static=$GITHUB_WORKSPACE/zig-out/${target}/urbit
            if ${{ inputs.next != null }}; then
              next=$(echo "${{ inputs.next }}" | sed 's/[^0-9]//g')
              dest="gs://${UPLOAD_BASE}/next/kelvin/${next}/v${sha_version}/vere-v${sha_version}-${target}"
            else
              dest="gs://${UPLOAD_BASE}/${{ inputs.pace }}/v${sha_version}/vere-v${sha_version}-${target}"
            fi

            args=""
            # We never overwrite a binary deployed to the "live" train, but we do
            # overwrite same-versioned binaries deployed to the "soon" and "edge"
            # trains.
            if [[ "${{ inputs.pace }}" == "live" ]]; then
              gsutil cp -n "${urbit_static}" "$dest"
            else
              gsutil cp "${urbit_static}" "$dest"
            fi
            exitcode=$?

            ([ $exitcode -eq 0 ] && echo "upload to $dest complete.") ||
            (echo "upload to $dest failed." && exit $exitcode);
          done

  upload-version-string:
    name: Upload latest deployed version string to GCP
    runs-on: ubuntu-latest
    needs: [urbit]
    if: inputs.upload
    steps:
      - uses: actions/checkout@v3

      - uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Upload latest deployed version string to GCP
        run: |
          echo "${{ inputs.pace }}" > ./PACE
          echo $(sed -nr 's/#define URBIT_VERSION "(.*)"/\1/p' zig-out/include/version.h) > ./VERSION

          if ${{ inputs.next != null }}; then
            next=$(echo "${{ inputs.next }}" | sed 's/[^0-9]//g')
            target="gs://${UPLOAD_BASE}/next/kelvin/${next}/last"
          else
            target="gs://${UPLOAD_BASE}/${{ inputs.pace }}/last"
          fi

          # We don't use -n here because we want to overwrite the version
          # string.
          gsutil cp ./VERSION "$target"
          exitcode=$?

          [ $exitcode -eq 0 ] &&
            echo "Upload to $target completed successfully." ||
            echo "Upload to $target failed.";
          exit $exitcode
