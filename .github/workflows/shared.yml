name: shared

on:
  workflow_call:
    inputs:
      docker:
        description: 'Build and upload image to Docker Hub'
        type: boolean
        default: false
        required: false
      pace:
        description: 'Release pace'
        type: string
        default: 'edge'
        required: false
      upload:
        description: 'Upload binaries to GCP'
        type: boolean
        default: false
        required: false
      fake_tests:
        description: 'Run fake ship tests'
        type: boolean
        default: true
        required: false
    secrets:
      GCP_CREDENTIALS:
        required: false
      GCP_PROJECT:
        required: false

env:
  UPLOAD_BASE: bootstrap.urbit.org/vere
  GH_TOKEN: ${{ github.token }}

jobs:
  urbit:
    strategy:
      fail-fast: false
      matrix:
        include:
          # GitHub doesn't provide AArch64 Linux machines, so we self-host a
          # runner instead.
          - { target: linux-aarch64, runner: [self-hosted, Linux, ARM64] }
          - { target: linux-x86_64, runner: ubuntu-22.04 }
          # GitHub doesn't provide M1 macOS machines, so we self-host a runner
          # instead.
          - { target: macos-aarch64, runner: [self-hosted, macos, ARM64] }
          - { target: macos-x86_64, runner: macos-12 }

    runs-on: ${{ matrix.runner }}

    steps:
      #
      # BUILD AND TEST
      #
      - uses: actions/checkout@v3

      - name: chown /usr/local
        if: ${{ matrix.target == 'linux-x86_64' }}
        run: |
          # See https://github.com/actions/cache/issues/845. Note we don't run
          # this on linux-aarch64 because we run on a self-hosted GitHub Actions
          # runner for which `/usr/local` has already been `chown`d to the user
          # running the GitHub Actions runner.
          sudo chown $(whoami) /usr/local && (chown -R $USER /usr/local/*-musl || true)

      - name: Set up build cache
        uses: actions/cache@v3
        with:
          key: ${{ matrix.target }}-cache
          path: |
            # # Cache bazel path on Linux.
            ~/.cache/bazel/_bazel_$(whoami)
            # # Cache bazel path on macOS.
            /private/var/tmp/_bazel_$(whoami)
            # Cache musl libc toolchains.
            /usr/local/*-musl

      - name: Install toolchains
        run: |
          case "${{ matrix.target }}" in
            "linux-aarch64")
              bazel run //bazel/toolchain:aarch64-linux-musl-gcc
              ;;
            "linux-x86_64")
              bazel run //bazel/toolchain:x86_64-linux-musl-gcc
              ;;
            "macos-aarch64")
              ;;
            "macos-x86_64")
              # Switch Xcode path to match the path specified in our bazel toolchain.
              sudo xcode-select --switch /Library/Developer/CommandLineTools
              brew install automake libtool llvm@15
              ;;
            *)
              echo "Unsupported target: ${{ matrix.target }}"
              exit 1
              ;;
          esac


      - name: Build binary
        run: |
          echo "${{ inputs.pace }}" > ./PACE
          case "${{ matrix.target }}" in
            "linux-aarch64")
              bazel build :urbit
              ;;
            "linux-x86_64")
              bazel build :urbit
              ;;
            "macos-aarch64")
              bazel build :urbit
              ;;
            "macos-x86_64")
              bazel build --clang_version=15.0.7 --extra_toolchains=//bazel/toolchain:brew-clang-macos-x86_64-toolchain :urbit
              ;;
          esac

      - name: Run unit tests
        run: |
          if [[ "${{ matrix.target }}" == "macos-x86_64" ]]; then
            bazel test --build_tests_only --clang_version=14.0.6 --extra_toolchains=//bazel/toolchain:brew-clang-macos-x86_64-toolchain  ...
          else
            bazel test --build_tests_only ...
          fi

      - name: Run fake ship tests
        if: ${{ matrix.target == 'linux-x86_64' && inputs.fake_tests }}
        run: |
          # See https://github.com/urbit/vere/issues/40.
          bazel build //pkg/vere:test-fake-ship


      #
      # UPLOAD TO GCP
      #
      - name: Prepare binary for upload to GCP
        if: ${{ inputs.upload }}
        run: |
          echo "urbit_static=$GITHUB_WORKSPACE/bazel-bin/pkg/vere/urbit" | tee -a $GITHUB_ENV

      - uses: google-github-actions/auth@v1
        if: ${{ inputs.upload }}
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - uses: google-github-actions/setup-gcloud@v1
        if: ${{ inputs.upload }}
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Upload binary to bootstrap.urbit.org
        if: ${{ inputs.upload }}
        run: |
          bazel build :version_str
          sha_version=$(cat ./bazel-bin/version)
          if ${{ inputs.next != null }}; then
            target="gs://${UPLOAD_BASE}/next/kelvin/${{ inputs.next }}/v${sha_version}/vere-v${sha_version}-${{ matrix.target }}"
          else
            target="gs://${UPLOAD_BASE}/${{ inputs.pace }}/v${sha_version}/vere-v${sha_version}-${{ matrix.target }}"
          fi

          args=""
          # We never overwrite a binary deployed to the "live" train, but we do
          # overwrite same-versioned binaries deployed to the "soon" and "edge"
          # trains.
          if [[ "${{ inputs.pace }}" == "live" ]]; then
            gsutil cp -n "${{ env.urbit_static }}" "$target"
          else
            gsutil cp "${{ env.urbit_static }}" "$target"
          fi
          exitcode=$?

          [ $exitcode -eq 0 ] &&
            echo "upload to $target complete." ||
            echo "upload to $target failed.";
          exit $exitcode


      #
      # DOCKER
      #
      - uses: docker/docker-login-action@v1.8.0
        if: ${{ inputs.docker && matrix.target == 'linux-x86_64' }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: christian-korneck/update-container-description-action@v1
        if: ${{ inputs.docker && matrix.target == 'linux-x86_64' }}
        env:
          DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASS: ${{ secrets.DOCKERHUB_TOKEN }}
        with:
          destination_container_repo: ${{ secrets.DOCKERHUB_USERNAME }}/urbit
          provider: dockerhub
          short_description: 'Urbit: a clean-slate OS and network for the 21st century'
          readme_file: 'docker/README.md'

      - name: Build and push version-tagged Docker image
        if: ${{ inputs.docker && matrix.target == 'linux-x86_64' }}
        run: |
          bazel run //docker:push_version_x86_64

      - name: Build and push pace-tagged Docker image
        if: ${{ inputs.docker && matrix.target == 'linux-x86_64' }}
        run: |
          bazel run //docker:push_pace_x86_64

      - name: Build and push latest-tagged Docker image
        if: ${{ inputs.docker && matrix.target == 'linux-x86_64' && inputs.pace == 'live' }}
        run: |
          bazel run //docker:push_latest_x86_64

  upload-version-string:
    name: Upload latest deployed version string to GCP
    runs-on: ubuntu-latest
    needs: [urbit]
    if: inputs.upload
    steps:
      - uses: actions/checkout@v3

      - uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Upload latest deployed version string to GCP
        run: |
          echo "${{ inputs.pace }}" > ./PACE
          if ${{ inputs.next != null }}; then
            target="gs://${UPLOAD_BASE}/next/kelvin/${{ inputs.next }}/last"
          else
            target="gs://${UPLOAD_BASE}/${{ inputs.pace }}/last"
          fi

          bazel build :version_str
          # We don't use -n here because we want to overwrite the version
          # string.
          gsutil cp ./bazel-bin/version "$target"

          [ $exitcode -eq 0 ] &&
            echo "Upload to $target completed successfully." ||
            echo "Upload to $target failed.";
          exit $exitcode
