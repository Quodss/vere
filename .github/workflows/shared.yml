name: shared

on:
  workflow_call:
    inputs:
      pace:
        description: 'Release pace'
        type: string
        default: 'edge'
        required: false
      upload:
        description: 'Upload binaries to GCP'
        type: boolean
        default: false
        required: false
      fake_tests:
        description: 'Run fake ship tests'
        type: boolean
        default: true
        required: false
      next:
        description: 'Next Kelvin version branch name'
        type: string
        default: null
        required: false
    secrets:
      GCP_CREDENTIALS:
        required: false
      GCP_PROJECT:
        required: false

env:
  UPLOAD_BASE: bootstrap.urbit.org/vere
  GH_TOKEN: ${{ github.token }}

jobs:
  urbit:
    strategy:
      fail-fast: false

    runs-on: ubuntu-22.04

    steps:
      #
      # BUILD AND TEST
      #
      - uses: actions/checkout@v3

      - name: Set swap space
        run: |
          echo "Memory and swap:"
          free -h
          echo
          swapon --show
          echo

          export SWAP_FILE=$(swapon --show=NAME | tail -n 1)
          if test -z "${SWAP_FILE}"; then
              export SWAP_FILE=/swapfile
          else
              sudo swapoff -a
              sudo rm "${SWAP_FILE}"
          fi
          sudo fallocate -l 10G "${SWAP_FILE}"
          sudo chmod 600 "${SWAP_FILE}"
          sudo mkswap "${SWAP_FILE}"
          sudo swapon "${SWAP_FILE}"

          echo "Memory and swap:"
          free -h
          echo
          swapon --show
          echo

      - name: Set up build cache
        uses: actions/cache@v3
        with:
          key: linux-x86_64-zig-cache
          path: |
            ~/.zig
            ~/.cache/zig
            ${{ github.workspace }}/.zig-cache

      - name: Install Zig
        run: |
          if [ ! -d "$HOME/.zig" ]; then
            url="https://ziglang.org/download/0.13.0/zig-linux-x86_64-0.13.0.tar.xz"
            # download zig
            curl -L -o $HOME/zig.tar.xz "${url}"
            # unpack to ./zig
            mkdir $HOME/.zig
            tar -xf $HOME/zig.tar.xz -C $HOME/.zig --strip-components=1
          fi
          # add zig to path
          echo $HOME/.zig >> $GITHUB_PATH

      - name: Build binaries
        run: |
          zig build                    \
            -Dall                      \
            -Doptimize=ReleaseFast     \
            -Dpace=${{inputs.pace}}    \
            --summary all

      - name: Run unit tests
        run: |
          zig build                    \
            ur-test ent-test           \
            hashtable-test jets-test   \
            nock-test retrieve-test    \
            serial-test ames-test      \
            boot-test newt-test        \
            vere-noun-test unix-test   \
            benchmarks                 \
            -Doptimize=ReleaseFast     \
            -Dpace=${{inputs.pace}}    \
            --summary all

      - name: Build test binary
        if: ${{ inputs.fake_tests }}
        run: |
          zig build                    \
            -Doptimize=ReleaseFast     \
            -Dpace=${{inputs.pace}}    \
            -Dbinary-name=urbit-test   \
            -Dcpu-dbg                  \
            -Dmem-dbg                  \
            -Dc3dbg                    \
            -Dsnapshot-validation      \
            --summary all

      - name: Boot fake ship
        if: ${{ inputs.fake_tests }}
        run: |
          urbit_binary=${{ github.workspace }}/zig-out/x86_64-linux-musl/urbit-test
          solid_pill=${{ github.workspace }}/solid.pill


          curl -LJ -o $solid_pill https://github.com/urbit/urbit/raw/84ebb321314b3fbc08253de5213f19450ffbfb3e/bin/solid.pill
          curl -LJ -o urbit.tar.gz https://github.com/urbit/urbit/archive/84ebb321314b3fbc08253de5213f19450ffbfb3e.tar.gz

          mkdir ./urbit
          tar xfz urbit.tar.gz -C ./urbit --strip-components=1
          cp -RL ./urbit/tests ./urbit/pkg/arvo/tests

          set -xeuo pipefail

          $urbit_binary --lite-boot --daemon --fake bus \
            --bootstrap $solid_pill                     \
            --arvo ./urbit/pkg/arvo                     \
            --pier ./pier

          cleanup() {
            if [ -f ./pier/.vere.lock ]; then
              kill $(< ./pier/.vere.lock) || true
            fi
            set +x
          }

          trap cleanup EXIT
          port=$(grep loopback ./pier/.http.ports | awk -F ' ' '{print $1}')

          lensd() {
            curl -s                                                              \
              --data "{\"source\":{\"dojo\":\"$1\"},\"sink\":{\"stdout\":null}}" \
              "http://localhost:$port" | xargs printf %s | sed 's/\\n/\n/g'
          }

          lensa() {
            curl -s                                                             \
              --data "{\"source\":{\"dojo\":\"$2\"},\"sink\":{\"app\":\"$1\"}}" \
              "http://localhost:$port" | xargs printf %s | sed 's/\\n/\n/g'
          }

          check() {
            [ 3 -eq $(lensd 3) ]
          }

          lensd '+vat %base'

          if check && sleep 10 && check; then
            echo "boot success"
            lensa hood '+hood/exit'
            while [ -f ./pier/.vere.lock ]; do
              echo "waiting for pier to shut down"
              sleep 5
            done
          else
            echo "boot failure"
            kill $(< ./pier/.vere.lock) || true
            set +x
            exit 1
          fi

      - name: Run fake ship tests
        if: ${{ inputs.fake_tests }}
        run: |
          urbit_binary=${{ github.workspace }}/zig-out/x86_64-linux-musl/urbit-test

          set -x

          $urbit_binary --lite-boot --daemon --gc ./pier 2> urbit-output

          port=$(grep loopback ./pier/.http.ports | awk -F ' ' '{print $1}')

          lensd() {
            curl -s                                                              \
              --data "{\"source\":{\"dojo\":\"$1\"},\"sink\":{\"stdout\":null}}" \
              "http://localhost:$port" | xargs printf %s | sed 's/\\n/\n/g'
          }

          lensa() {
            curl -s                                                             \
              --data "{\"source\":{\"dojo\":\"$2\"},\"sink\":{\"app\":\"$1\"}}" \
              "http://localhost:$port" | xargs printf %s | sed 's/\\n/\n/g'
          }

          tail -F urbit-output >&2 &

          tailproc=$!

          cleanup () {
            kill $(cat ./pier/.vere.lock) || true
            kill "$tailproc" 2>/dev/null || true

            set +x
          }

          trap cleanup EXIT

          #  print the arvo version
          #
          lensd '+vat %base'

          #  measure initial memory usage
          #
          lensd '~&  ~  ~&  %init-mass-start  ~'
          lensa hood '+hood/mass'
          lensd '~&  ~  ~&  %init-mass-end  ~'

          #  run the unit tests
          #
          lensd '~&  ~  ~&  %test-unit-start  ~'
          lensd '-test %/tests ~'
          lensd '~&  ~  ~&  %test-unit-end  ~'

          #  use the :test app to build all agents, generators, and marks
          #
          lensa hood '+hood/start %test'

          lensd '~&  ~  ~&  %test-agents-start  ~'
          lensa test '%agents'
          lensd '~&  ~  ~&  %test-agents-end  ~'

          lensd '~&  ~  ~&  %test-generators-start  ~'
          lensa test '%generators'
          lensd '~&  ~  ~&  %test-generators-end  ~'

          lensd '~&  ~  ~&  %test-marks-start  ~'
          lensa test '%marks'
          lensd '~&  ~  ~&  %test-marks-end  ~'

          #  measure memory usage post tests
          #
          lensd '~&  ~  ~&  %test-mass-start  ~'
          lensa hood '+hood/mass'
          lensd '~&  ~  ~&  %test-mass-end  ~'

          #  defragment the loom
          #
          lensd '~&  ~  ~&  %pack-start  ~'
          lensa hood '+hood/pack'
          lensd '~&  ~  ~&  %pack-end  ~'

          #  reclaim space within arvo
          #
          lensd '~&  ~  ~&  %trim-start  ~'
          lensa hood '+hood/trim'
          lensd '~&  ~  ~&  %trim-end  ~'

          #  measure memory usage pre |meld
          #
          lensd '~&  ~  ~&  %trim-mass-start  ~'
          lensa hood '+hood/mass'
          lensd '~&  ~  ~&  %trim-mass-end  ~'

          #  globally deduplicate
          #
          lensd '~&  ~  ~&  %meld-start  ~'
          lensa hood '+hood/meld'
          lensd '~&  ~  ~&  %meld-end  ~'

          #  measure memory usage post |meld
          #
          lensd '~&  ~  ~&  %meld-mass-start  ~'
          lensa hood '+hood/mass'
          lensd '~&  ~  ~&  %meld-mass-end  ~'

          lensa hood '+hood/exit'

          cleanup

          # Collect output
          cp urbit-output test-output-unit
          cp urbit-output test-output-agents
          cp urbit-output test-output-generators
          cp urbit-output test-output-marks

          # TODO: when re-enabling fake ship tests on macOS, use `sed -i ''`
          # instead of `sed -i`.
          sed -i '0,/test-unit-start/d'        test-output-unit
          sed -i '/test-unit-end/,$d'         test-output-unit

          sed -i '0,/test-agents-start/d'      test-output-agents
          sed -i '/test-agents-end/,$d'       test-output-agents

          sed -i '0,/test-generators-start/d'  test-output-generators
          sed -i '/test-generators-end/,$d'   test-output-generators

          sed -i '0,/test-marks-start/d'       test-output-marks
          sed -i '/test-marks-end/,$d'        test-output-marks

          OUTDIR="$(pwd)/test-fake-ship-output"
          mkdir -p $OUTDIR
          cp test-output-* $OUTDIR

          set +x

          hdr () {
            echo =====$(sed 's/./=/g' <<< "$1")=====
            echo ==== $1 ====
            echo =====$(sed 's/./=/g' <<< "$1")=====
          }

          for f in $(find "$OUTDIR" -type f); do
            hdr "$(basename $f)"
            cat "$f"
          done

          fail=0

          for f in $(find "$OUTDIR" -type f); do
            if egrep "((FAILED|CRASHED)|warn:) " $f >/dev/null; then
              if [[ $fail -eq 0 ]]; then
                hdr "Test Failures"
              fi

              echo "ERROR Test failure in $(basename $f)"

              ((fail++))
            fi
          done

          if [[ $fail -eq 0 ]]; then
            hdr "Success"
          fi

          exit "$fail"

      #
      # UPLOAD TO GCP
      #

      - uses: google-github-actions/auth@v1
        if: ${{ inputs.upload }}
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - uses: google-github-actions/setup-gcloud@v1
        if: ${{ inputs.upload }}
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Upload binary to bootstrap.urbit.org
        if: ${{ inputs.upload }}
        run: |
          sha_version=$(sed -nr 's/#define URBIT_VERSION "(.*)"/\1/p' zig-out/include/version.h)
          declare -a targets=(
            "aarch64-linux-musl"
            "aarch64-macos-none"
            "x86_64-linux-musl"
            "x86_64-macos-none"
          )
          for target in "${targets[@]}"
          do
            urbit_static=$GITHUB_WORKSPACE/zig-out/${target}/urbit
            if ${{ inputs.next != null }}; then
              next=$(echo "${{ inputs.next }}" | sed 's/[^0-9]//g')
              dest="gs://${UPLOAD_BASE}/next/kelvin/${next}/v${sha_version}/vere-v${sha_version}-${target}"
            else
              dest="gs://${UPLOAD_BASE}/${{ inputs.pace }}/v${sha_version}/vere-v${sha_version}-${target}"
            fi

            args=""
            # We never overwrite a binary deployed to the "live" train, but we do
            # overwrite same-versioned binaries deployed to the "soon" and "edge"
            # trains.
            if [[ "${{ inputs.pace }}" == "live" ]]; then
              gsutil cp -n "${urbit_static}" "$dest"
            else
              gsutil cp "${urbit_static}" "$dest"
            fi
            exitcode=$?

            ([ $exitcode -eq 0 ] && echo "upload to $dest complete.") ||
            (echo "upload to $dest failed." && exit $exitcode);
          done

  upload-version-string:
    name: Upload latest deployed version string to GCP
    runs-on: ubuntu-latest
    needs: [urbit]
    if: inputs.upload
    steps:
      - uses: actions/checkout@v3

      - uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Upload latest deployed version string to GCP
        run: |
          echo "${{ inputs.pace }}" > ./PACE
          echo $(sed -nr 's/#define URBIT_VERSION "(.*)"/\1/p' zig-out/include/version.h) > ./VERSION

          if ${{ inputs.next != null }}; then
            next=$(echo "${{ inputs.next }}" | sed 's/[^0-9]//g')
            target="gs://${UPLOAD_BASE}/next/kelvin/${next}/last"
          else
            target="gs://${UPLOAD_BASE}/${{ inputs.pace }}/last"
          fi

          # We don't use -n here because we want to overwrite the version
          # string.
          gsutil cp ./VERSION "$target"
          exitcode=$?

          [ $exitcode -eq 0 ] &&
            echo "Upload to $target completed successfully." ||
            echo "Upload to $target failed.";
          exit $exitcode
